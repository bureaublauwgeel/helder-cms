<?xml version="1.0" encoding="UTF-8"?>

<project name="thenewmotion_webshop" default="build_test">

    <property environment="env"/>
    <!-- By default, we assume all tools to be on the $PATH -->
    <!-- Use this when the tools are managed by Composer in /var/lib/jenkins/.composer/vendor/bin -->
    <property name="pdepend" value="/var/lib/jenkins/.composer/vendor/bin/pdepend"/>
    <property name="phpcpd" value="/var/lib/jenkins/.composer/vendor/bin/phpcpd"/>
    <property name="phpcs" value="/var/lib/jenkins/.composer/vendor/bin/phpcs"/>
    <property name="phpdox" value="/var/lib/jenkins/.composer/vendor/bin/phpdox"/>
    <property name="phploc" value="/var/lib/jenkins/.composer/vendor/bin/phploc"/>
    <property name="phpmd" value="/var/lib/jenkins/.composer/vendor/bin/phpmd"/>
    <property name="phpunit" value="/var/lib/jenkins/.composer/vendor/bin/phpunit"/>

    <!-- get checked out repository dir from env -->
    <property name="workspace.dir" value="${env.WORKSPACE}"/>
    <!-- build source to the build dir -->
    <property name="build.dir" value="${env.WORKSPACE}/build"/>

    <target name="purge_build">
        <!-- delete the build dir in case it existed  -->
        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="purge_vendor">
        <!-- delete the build dir in case it existed  -->
        <delete dir="${build.dir}/vendor" failonerror="false"/>
    </target>

    <!--  basic fileset for deploy  -->
    <target name="copy_build_files" depends="purge_build">
        <!-- copy what we need from the checked out source to the build dir -->
        <copy todir="${build.dir}/" includeEmptyDirs="true">
            <fileset dir="${workspace.dir}">
                <exclude name="jenkins.xml"/>
                <exclude name="*.md"/>
                <exclude name="app/config/parameters.yml*"/>
                <exclude name="web/robots*.txt"/>
                <exclude name="**/web/uploads/"/>
                <exclude name="private/**"/>
                <exclude name="**/.gitignore"/>
                <exclude name="**/.gitkeep"/>
                <exclude name="**/.git/**"/>
            </fileset>
        </copy>
    </target>

    <target name="copy_parameters_yml_test">
        <!--  copy the test parameters.yml.dist file...  -->
        <copy todir="${build.dir}/">
            <fileset dir="${workspace.dir}">
                <include name="app/config/parameters.yml.bbgtest"/>
            </fileset>
        </copy>
        <!--  ...and rename it  -->
        <move file="${build.dir}/app/config/parameters.yml.bbgtest" tofile="${build.dir}/app/config/parameters.yml.dist"/>
    </target>

    <target name="copy_parameters_yml_accept">
        <!--  copy the production parameters.yml.dist file...  -->
        <copy todir="${build.dir}/">
            <fileset dir="${workspace.dir}">
                <include name="app/config/parameters.yml.bbgaccept"/>
            </fileset>
        </copy>
        <!--  ...and rename it  -->
        <move file="${build.dir}/app/config/parameters.yml.bbgaccept" tofile="${build.dir}/app/config/parameters.yml.dist"/>
    </target>

    <target name="copy_parameters_yml_prod">
        <!--  copy the production parameters.yml.dist file...  -->
        <copy todir="${build.dir}/">
            <fileset dir="${workspace.dir}">
                <include name="app/config/parameters.yml.prod"/>
            </fileset>
        </copy>
        <!--  ...and rename it  -->
        <move file="${build.dir}/app/config/parameters.yml.prod" tofile="${build.dir}/app/config/parameters.yml.dist"/>
    </target>

    <target name="copy_robots_txt_test">

        <!-- copy the test robots.txt file -->
        <copy todir="${build.dir}/">
            <fileset dir="${workspace.dir}">
                <include name="web/robots.txt"/>
            </fileset>
        </copy>

    </target>

    <target name="copy_robots_txt_prod">

        <!-- copy the production robots.txt file... -->
        <copy todir="${build.dir}/">
            <fileset dir="${workspace.dir}">
                <include name="web/robots.prod.txt"/>
            </fileset>
        </copy>

        <!-- ...and rename it -->
        <move file="${build.dir}/web/robots.prod.txt" tofile="${build.dir}/web/robots.txt"/>

    </target>

    <target name="jenkins_parameters_yml">
        <copy file="${workspace.dir}/app/config/parameters.yml.jenkins"
              tofile="${workspace.dir}/app/config/parameters.yml"/>
    </target>

    <target name="build_test"
            depends="copy_build_files,
            copy_robots_txt_test,
            jenkins_parameters_yml,
            validate-build-parallel,
            purge_vendor,
            copy_parameters_yml_test"/>

    <target name="build_prod"
            depends="copy_build_files,
            copy_robots_txt_prod,
            jenkins_parameters_yml,
            validate-build-parallel,
            purge_vendor,
            copy_parameters_yml_prod,
            phpdox"/>

    <target name="build_accept"
            depends="
            copy_build_files,
            copy_robots_txt_test,
            jenkins_parameters_yml,
            validate-build-parallel,
            purge_vendor,
            copy_parameters_yml_accept,
            phpdox"/>

    <target name="validate-build"
            depends="prepare,static-analysis,phpunit"
            description="Performs static analysis, runs the tests"/>

    <target name="validate-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit"
            description="Performs static analysis (executing the tools in parallel), runs the tests"/>


    <target name="quick-build"
            depends="prepare,composer,lint,phpunit-no-coverage"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis"/>

    <!-- The composer does also clear the cache -->
    <target name="composer" description="Install all the vendors">
        <exec executable="composer" failonerror="true">
            <arg value="install"/>
            <arg value="-o"/>
            <arg value="--working-dir"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="lint"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l"/>

            <fileset dir="${basedir}/src">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/src"/>
            <arg path="${basedir}/tests"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/src"/>
        </exec>
        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/src"/>
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="text"/>
            <arg path="${basedir}/build/phpmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src"/>
            <arg value="xml"/>
            <arg path="${basedir}/build/phpmd.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/src"/>
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${basedir}/src"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>



    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare,composer"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/src"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg line="-c ${basedir}/app/phpunit.xml.dist ${basedir}/src"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg line="-c ${basedir}/app/phpunit.xml.dist ${basedir}/src --no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpdox"
            unless="phpdox.done"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDox">
        <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox"/>

        <property name="phpdox.done" value="true"/>
    </target>

    <target name="-check-failure">
        <echo message="result of phpunit ${result.phpunit}" />
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>


</project>
